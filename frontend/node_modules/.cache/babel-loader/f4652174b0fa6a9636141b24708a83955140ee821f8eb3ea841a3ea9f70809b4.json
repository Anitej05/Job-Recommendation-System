{"ast":null,"code":"var _jsxFileName = \"E:\\\\Job-Recommendation-System\\\\frontend\\\\src\\\\components\\\\CareerTips.js\",\n  _s = $RefreshSig$();\n// src/components/CareerTips.js\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sectors = ['General', 'Technology', 'Finance', 'Healthcare', 'Education', 'Marketing'];\nfunction CareerTips() {\n  _s();\n  const [tips, setTips] = useState([]); // final shape: [{ title, description }]\n  const [loading, setLoading] = useState(false);\n  const [sector, setSector] = useState('General');\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchTips() {\n      setLoading(true);\n      setError(null);\n      try {\n        const base = 'http://localhost:8000/market-trends';\n        const url = sector === 'General' ? base : `${base}?sector=${encodeURIComponent(sector)}`;\n        const res = await fetch(url);\n        if (!res.ok) throw new Error(`Status ${res.status}`);\n        const data = await res.json();\n        const raw = data.market_trends;\n        let parsedTips = [];\n\n        // 1) If it's already a proper array of objects, use it\n        if (Array.isArray(raw) && raw.length > 0 && typeof raw[0] === 'object') {\n          parsedTips = raw;\n\n          // 2) If it's an array of strings (likely your JSON lines), try to reassemble & parse\n        } else if (Array.isArray(raw) && raw.length > 0 && raw.every(item => typeof item === 'string')) {\n          // join lines, strip any ```json fences, then JSON.parse\n          const joined = raw.join('\\n');\n          const cleaned = joined.replace(/```(?:json)?/g, '').replace(/```/g, '').trim();\n          try {\n            const obj = JSON.parse(cleaned);\n            if (Array.isArray(obj)) {\n              parsedTips = obj;\n            }\n          } catch {\n            // fall through to next fallback\n          }\n\n          // 3) Fallback: if it's a single string, split on newlines and colon\n        } else if (typeof raw === 'string') {\n          const lines = raw.split('\\n').map(l => l.replace(/^[-*]\\s*/, '').trim()).filter(Boolean);\n          parsedTips = lines.map(line => {\n            const [head, ...rest] = line.split(':');\n            return {\n              title: head.trim(),\n              description: rest.join(':').trim()\n            };\n          });\n        }\n        if (!parsedTips.length) {\n          throw new Error('No tips parsed');\n        }\n        setTips(parsedTips);\n      } catch (err) {\n        console.error(\"Failed to fetch tips:\", err);\n        setError(\"Unable to fetch market trends. Please try again later.\");\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchTips();\n  }, [sector]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"career-tips-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Career Tips & Market Trends\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '15px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"sector-select\",\n        children: \"Select a sector: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"sector-select\",\n        value: sector,\n        onChange: e => setSector(e.target.value),\n        style: {\n          padding: '5px'\n        },\n        children: sectors.map(s => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: s,\n          children: s\n        }, s, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading tips...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 19\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jobs-grid\",\n      children: tips.map((tip, idx) => {\n        // strip any ** from titles\n        const cleanTitle = tip.title.replace(/\\*\\*/g, '').trim();\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"job-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: cleanTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"job-card-description\",\n            children: tip.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(CareerTips, \"PzXPxyuoUly70kwldKuyYVAm5Xk=\");\n_c = CareerTips;\nexport default CareerTips;\nvar _c;\n$RefreshReg$(_c, \"CareerTips\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","sectors","CareerTips","_s","tips","setTips","loading","setLoading","sector","setSector","error","setError","fetchTips","base","url","encodeURIComponent","res","fetch","ok","Error","status","data","json","raw","market_trends","parsedTips","Array","isArray","length","every","item","joined","join","cleaned","replace","trim","obj","JSON","parse","lines","split","map","l","filter","Boolean","line","head","rest","title","description","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","margin","htmlFor","id","value","onChange","e","target","padding","s","color","tip","idx","cleanTitle","_c","$RefreshReg$"],"sources":["E:/Job-Recommendation-System/frontend/src/components/CareerTips.js"],"sourcesContent":["// src/components/CareerTips.js\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst sectors = [\r\n  'General',\r\n  'Technology',\r\n  'Finance',\r\n  'Healthcare',\r\n  'Education',\r\n  'Marketing'\r\n];\r\n\r\nfunction CareerTips() {\r\n  const [tips, setTips]       = useState([]);   // final shape: [{ title, description }]\r\n  const [loading, setLoading] = useState(false);\r\n  const [sector, setSector]   = useState('General');\r\n  const [error, setError]     = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchTips() {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const base = 'http://localhost:8000/market-trends';\r\n        const url  = sector === 'General'\r\n          ? base\r\n          : `${base}?sector=${encodeURIComponent(sector)}`;\r\n\r\n        const res = await fetch(url);\r\n        if (!res.ok) throw new Error(`Status ${res.status}`);\r\n        const data = await res.json();\r\n\r\n        const raw = data.market_trends;\r\n\r\n        let parsedTips = [];\r\n\r\n        // 1) If it's already a proper array of objects, use it\r\n        if (Array.isArray(raw) && raw.length > 0 && typeof raw[0] === 'object') {\r\n          parsedTips = raw;\r\n\r\n        // 2) If it's an array of strings (likely your JSON lines), try to reassemble & parse\r\n        } else if (\r\n          Array.isArray(raw) &&\r\n          raw.length > 0 &&\r\n          raw.every(item => typeof item === 'string')\r\n        ) {\r\n          // join lines, strip any ```json fences, then JSON.parse\r\n          const joined = raw.join('\\n');\r\n          const cleaned = joined\r\n            .replace(/```(?:json)?/g, '')\r\n            .replace(/```/g, '')\r\n            .trim();\r\n          try {\r\n            const obj = JSON.parse(cleaned);\r\n            if (Array.isArray(obj)) {\r\n              parsedTips = obj;\r\n            }\r\n          } catch {\r\n            // fall through to next fallback\r\n          }\r\n\r\n        // 3) Fallback: if it's a single string, split on newlines and colon\r\n        } else if (typeof raw === 'string') {\r\n          const lines = raw\r\n            .split('\\n')\r\n            .map(l => l.replace(/^[-*]\\s*/, '').trim())\r\n            .filter(Boolean);\r\n\r\n          parsedTips = lines.map(line => {\r\n            const [head, ...rest] = line.split(':');\r\n            return {\r\n              title: head.trim(),\r\n              description: rest.join(':').trim()\r\n            };\r\n          });\r\n        }\r\n\r\n        if (!parsedTips.length) {\r\n          throw new Error('No tips parsed');\r\n        }\r\n\r\n        setTips(parsedTips);\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch tips:\", err);\r\n        setError(\"Unable to fetch market trends. Please try again later.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchTips();\r\n  }, [sector]);\r\n\r\n  return (\r\n    <div className=\"career-tips-container\">\r\n      <h2>Career Tips & Market Trends</h2>\r\n\r\n      <div style={{ margin: '15px 0' }}>\r\n        <label htmlFor=\"sector-select\">Select a sector: </label>\r\n        <select\r\n          id=\"sector-select\"\r\n          value={sector}\r\n          onChange={e => setSector(e.target.value)}\r\n          style={{ padding: '5px' }}\r\n        >\r\n          {sectors.map(s => (\r\n            <option key={s} value={s}>{s}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {loading && <p>Loading tips...</p>}\r\n      {error   && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n      {!loading && !error && (\r\n        <div className=\"jobs-grid\">\r\n          {tips.map((tip, idx) => {\r\n            // strip any ** from titles\r\n            const cleanTitle = tip.title.replace(/\\*\\*/g, '').trim();\r\n            return (\r\n              <div className=\"job-card\" key={idx}>\r\n                <h3>{cleanTitle}</h3>\r\n                <p className=\"job-card-description\">{tip.description}</p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CareerTips;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}