{"ast":null,"code":"var _jsxFileName = \"E:\\\\Job-Recommendation-System\\\\frontend\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chatLog, setChatLog] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Added state for loading\n  const chatWindowRef = useRef(null);\n\n  // Define the system prompt\n  const SYSTEM_PROMPT = \"You are an AI Mentor designed to help users with career training resources and finding suitable job opportunities. Provide helpful information, guidance, and relevant job listings or training links based on user queries. Maintain a professional and encouraging tone.\";\n\n  // Effect to scroll to the bottom when chatLog or isLoading updates\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n    }\n  }, [chatLog, isLoading]); // Scroll when chat updates or loading state changes\n\n  const sendMessage = async e => {\n    e.preventDefault();\n    const userMessage = message.trim();\n    if (!userMessage || isLoading) return; // Prevent sending empty or multiple messages\n\n    // Add user message to log immediately\n    setChatLog(prevChatLog => [...prevChatLog, {\n      sender: 'User',\n      text: userMessage\n    }]);\n    setMessage(''); // Clear input field right away\n    setIsLoading(true); // Set loading state\n\n    // Construct the conversation history including the system prompt\n    // This format (array of objects with role/content) is common for many AI APIs\n    const conversationHistory = [{\n      role: 'system',\n      content: SYSTEM_PROMPT\n    }, ...chatLog.map(entry => ({\n      role: entry.sender.toLowerCase() === 'user' ? 'user' : 'assistant',\n      content: entry.text\n    })), {\n      role: 'user',\n      content: userMessage\n    } // Add the *new* user message to the history being sent\n    ];\n    try {\n      const response = await fetch('http://localhost:8000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Send the full conversation history\n        body: JSON.stringify({\n          messages: conversationHistory\n        })\n      });\n      setIsLoading(false); // Clear loading state\n\n      if (!response.ok) {\n        const errorBody = await response.text().catch(() => response.statusText);\n        throw new Error(`HTTP error! Status: ${response.status} - ${errorBody}`);\n      }\n      const data = await response.json();\n      // Add bot response to log\n      // Assuming the backend sends back just the bot's reply text in `data.response`\n      setChatLog(prevChatLog => [...prevChatLog, {\n        sender: 'Bot',\n        text: data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setIsLoading(false); // Clear loading state on error\n      // Add an error message to the chat log\n      setChatLog(prevChatLog => [...prevChatLog, {\n        sender: 'Bot',\n        text: `*Error: Could not get a response. Please check the server connection. (${error.message})*`\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat with AI Mentor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      ref: chatWindowRef,\n      children: [chatLog.length === 0 && !isLoading &&\n      /*#__PURE__*/\n      // Only show initial message if not loading\n      _jsxDEV(\"div\", {\n        className: \"chat-entry bot initial-message\",\n        style: {\n          alignSelf: 'center',\n          textAlign: 'center',\n          maxWidth: '85%',\n          margin: '1rem auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Bot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 16\n        }, this), \" Hello! I'm your AI Mentor, ready to help you with training and job seeking. Ask me anything about career paths, necessary skills, or available jobs!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), chatLog.map((entry, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-entry ${entry.sender.toLowerCase()}`,\n        \"data-is-markdown\": entry.sender === 'Bot' ? \"true\" : undefined,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [entry.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: entry.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 46\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-entry bot loading-indicator\",\n        style: {\n          alignSelf: 'flex-start',\n          maxWidth: 'max-content' /*, animation: 'pulse 1.5s infinite ease-in-out'*/\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Bot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 16\n        }, this), \" ... \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"chat-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"chat-input\",\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: isLoading ? \"Waiting for response...\" : \"Type your message here\",\n        disabled: isLoading // Disable input while loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !message.trim() || isLoading,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"rnwvhgr3m8uR2oo9171byBLCAcg=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ReactMarkdown","jsxDEV","_jsxDEV","ChatBot","_s","message","setMessage","chatLog","setChatLog","isLoading","setIsLoading","chatWindowRef","SYSTEM_PROMPT","current","scrollTop","scrollHeight","sendMessage","e","preventDefault","userMessage","trim","prevChatLog","sender","text","conversationHistory","role","content","map","entry","toLowerCase","response","fetch","method","headers","body","JSON","stringify","messages","ok","errorBody","catch","statusText","Error","status","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","length","style","alignSelf","textAlign","maxWidth","margin","idx","undefined","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["E:/Job-Recommendation-System/frontend/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nfunction ChatBot() {\r\n  const [message, setMessage] = useState('');\r\n  const [chatLog, setChatLog] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Added state for loading\r\n  const chatWindowRef = useRef(null);\r\n\r\n  // Define the system prompt\r\n  const SYSTEM_PROMPT = \"You are an AI Mentor designed to help users with career training resources and finding suitable job opportunities. Provide helpful information, guidance, and relevant job listings or training links based on user queries. Maintain a professional and encouraging tone.\";\r\n\r\n  // Effect to scroll to the bottom when chatLog or isLoading updates\r\n  useEffect(() => {\r\n    if (chatWindowRef.current) {\r\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\r\n    }\r\n  }, [chatLog, isLoading]); // Scroll when chat updates or loading state changes\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    const userMessage = message.trim();\r\n    if (!userMessage || isLoading) return; // Prevent sending empty or multiple messages\r\n\r\n    // Add user message to log immediately\r\n    setChatLog(prevChatLog => [...prevChatLog, { sender: 'User', text: userMessage }]);\r\n    setMessage(''); // Clear input field right away\r\n    setIsLoading(true); // Set loading state\r\n\r\n    // Construct the conversation history including the system prompt\r\n    // This format (array of objects with role/content) is common for many AI APIs\r\n    const conversationHistory = [\r\n        { role: 'system', content: SYSTEM_PROMPT },\r\n        ...chatLog.map(entry => ({\r\n            role: entry.sender.toLowerCase() === 'user' ? 'user' : 'assistant',\r\n            content: entry.text\r\n        })),\r\n        { role: 'user', content: userMessage } // Add the *new* user message to the history being sent\r\n    ];\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8000/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        // Send the full conversation history\r\n        body: JSON.stringify({ messages: conversationHistory }),\r\n      });\r\n\r\n      setIsLoading(false); // Clear loading state\r\n\r\n      if (!response.ok) {\r\n         const errorBody = await response.text().catch(() => response.statusText);\r\n         throw new Error(`HTTP error! Status: ${response.status} - ${errorBody}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      // Add bot response to log\r\n      // Assuming the backend sends back just the bot's reply text in `data.response`\r\n      setChatLog(prevChatLog => [...prevChatLog, { sender: 'Bot', text: data.response }]);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      setIsLoading(false); // Clear loading state on error\r\n      // Add an error message to the chat log\r\n      setChatLog(prevChatLog => [...prevChatLog, { sender: 'Bot', text: `*Error: Could not get a response. Please check the server connection. (${error.message})*` }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <h2>Chat with AI Mentor</h2>\r\n      <div className=\"chat-window\" ref={chatWindowRef}>\r\n        {/* Display an initial greeting/instruction if chatLog is empty */}\r\n        {chatLog.length === 0 && !isLoading && ( // Only show initial message if not loading\r\n            <div className=\"chat-entry bot initial-message\" style={{ alignSelf: 'center', textAlign: 'center', maxWidth: '85%', margin: '1rem auto' }}>\r\n               {/* Text here is for UI only, the SYSTEM_PROMPT is sent to the API */}\r\n               <strong>Bot:</strong> Hello! I'm your AI Mentor, ready to help you with training and job seeking. Ask me anything about career paths, necessary skills, or available jobs!\r\n            </div>\r\n        )}\r\n        {/* Render chat messages */}\r\n        {chatLog.map((entry, idx) => (\r\n          <div key={idx} className={`chat-entry ${entry.sender.toLowerCase()}`} data-is-markdown={entry.sender === 'Bot' ? \"true\" : undefined}>\r\n            <strong>{entry.sender}:</strong> <ReactMarkdown>{entry.text}</ReactMarkdown>\r\n          </div>\r\n        ))}\r\n         {/* Loading indicator message */}\r\n        {isLoading && (\r\n            <div className=\"chat-entry bot loading-indicator\" style={{ alignSelf: 'flex-start', maxWidth: 'max-content' /*, animation: 'pulse 1.5s infinite ease-in-out'*/ }}>\r\n               <strong>Bot:</strong> ... {/* Or a typing indicator animation */}\r\n            </div>\r\n        )}\r\n      </div>\r\n      <form onSubmit={sendMessage} className=\"chat-form\">\r\n        <input\r\n          className=\"chat-input\"\r\n          type=\"text\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder={isLoading ? \"Waiting for response...\" : \"Type your message here\"}\r\n          disabled={isLoading} // Disable input while loading\r\n        />\r\n        <button type=\"submit\" disabled={!message.trim() || isLoading}>Send</button> {/* Disable button if input is empty or loading */}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}