{"ast":null,"code":"var _jsxFileName = \"E:\\\\Job-Recommendation-System\\\\frontend\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\n// src/components/ChatBot.js\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chatLog, setChatLog] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // State for loading\n  const chatWindowRef = useRef(null); // Ref for the chat window for scrolling\n\n  // Effect to scroll to the bottom when chatLog or isLoading updates\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n    }\n  }, [chatLog, isLoading]); // Scroll when chat updates or loading state changes\n\n  const sendMessage = async e => {\n    e.preventDefault();\n    const userMessage = message.trim(); // Trim whitespace\n    if (!userMessage || isLoading) return; // Prevent sending empty or multiple messages\n\n    // Add user message to log immediately\n    setChatLog(prevChatLog => [...prevChatLog, {\n      sender: 'User',\n      text: userMessage\n    }]);\n    setMessage(''); // Clear input field right away\n    setIsLoading(true); // Set loading state\n\n    const requestBody = {\n      message: userMessage\n      // Note: SYSTEM_PROMPT and chat history are NOT sent in this simplified request.\n      // Your backend is expected to handle the conversation context.\n    };\n    try {\n      const response = await fetch('http://localhost:8000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      setIsLoading(false); // Clear loading state\n\n      if (!response.ok) {\n        // Attempt to read error body if available, otherwise use status text\n        const errorBody = await response.text().catch(() => response.statusText);\n        throw new Error(`HTTP error! Status: ${response.status} - ${errorBody}`);\n      }\n      const data = await response.json();\n      // Assuming the backend sends back just the bot's reply text in `data.response`\n      setChatLog(prevChatLog => [...prevChatLog, {\n        sender: 'Bot',\n        text: data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setIsLoading(false); // Clear loading state on error\n      // Add an error message to the chat log\n      setChatLog(prevChatLog => [...prevChatLog, {\n        sender: 'Bot',\n        text: `*Error: Could not get a response. Please check the server connection. (${error.message})*`\n      }]); // Use markdown for italics\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat with AI Mentor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"page-subtitle\",\n      children: \"Ask me anything about career paths, skills, or job opportunities.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      ref: chatWindowRef,\n      children: [chatLog.length === 0 && !isLoading &&\n      /*#__PURE__*/\n      // Style this initial message slightly differently or center it\n      _jsxDEV(\"div\", {\n        className: \"chat-entry bot initial-message\",\n        style: {\n          alignSelf: 'center',\n          textAlign: 'center',\n          maxWidth: '85%',\n          margin: '1rem auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Bot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 16\n        }, this), \" Hello! I'm your AI Mentor, ready to help you with training and job seeking. Ask me anything!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), chatLog.map((entry, idx) =>\n      /*#__PURE__*/\n      // Added key prop for list rendering performance\n      // Added data-is-markdown attribute for CSS targeting if needed\n      _jsxDEV(\"div\", {\n        className: `chat-entry ${entry.sender.toLowerCase()}`,\n        \"data-is-markdown\": entry.sender === 'Bot' ? \"true\" : undefined,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [entry.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: entry.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 46\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)), isLoading &&\n      /*#__PURE__*/\n      // Keep the loading indicator aligned left and use a minimal style\n      _jsxDEV(\"div\", {\n        className: \"chat-entry bot loading-indicator\",\n        style: {\n          alignSelf: 'flex-start',\n          maxWidth: 'max-content' /*, animation: 'pulse 1.5s infinite ease-in-out'*/\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Bot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 16\n        }, this), \" ... \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"chat-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"chat-input\",\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: isLoading ? \"Waiting for response...\" : \"Type your message here\",\n        disabled: isLoading // Disable input while loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !message.trim() || isLoading,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"rnwvhgr3m8uR2oo9171byBLCAcg=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ReactMarkdown","jsxDEV","_jsxDEV","ChatBot","_s","message","setMessage","chatLog","setChatLog","isLoading","setIsLoading","chatWindowRef","current","scrollTop","scrollHeight","sendMessage","e","preventDefault","userMessage","trim","prevChatLog","sender","text","requestBody","response","fetch","method","headers","body","JSON","stringify","ok","errorBody","catch","statusText","Error","status","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","length","style","alignSelf","textAlign","maxWidth","margin","map","entry","idx","toLowerCase","undefined","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["E:/Job-Recommendation-System/frontend/src/components/ChatBot.js"],"sourcesContent":["// src/components/ChatBot.js\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nfunction ChatBot() {\r\n  const [message, setMessage] = useState('');\r\n  const [chatLog, setChatLog] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // State for loading\r\n  const chatWindowRef = useRef(null); // Ref for the chat window for scrolling\r\n\r\n  // Effect to scroll to the bottom when chatLog or isLoading updates\r\n  useEffect(() => {\r\n    if (chatWindowRef.current) {\r\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\r\n    }\r\n  }, [chatLog, isLoading]); // Scroll when chat updates or loading state changes\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    const userMessage = message.trim(); // Trim whitespace\r\n    if (!userMessage || isLoading) return; // Prevent sending empty or multiple messages\r\n\r\n    // Add user message to log immediately\r\n    setChatLog(prevChatLog => [...prevChatLog, { sender: 'User', text: userMessage }]);\r\n    setMessage(''); // Clear input field right away\r\n    setIsLoading(true); // Set loading state\r\n\r\n    const requestBody = {\r\n      message: userMessage\r\n      // Note: SYSTEM_PROMPT and chat history are NOT sent in this simplified request.\r\n      // Your backend is expected to handle the conversation context.\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8000/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n\r\n      setIsLoading(false); // Clear loading state\r\n\r\n      if (!response.ok) {\r\n         // Attempt to read error body if available, otherwise use status text\r\n         const errorBody = await response.text().catch(() => response.statusText);\r\n         throw new Error(`HTTP error! Status: ${response.status} - ${errorBody}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      // Assuming the backend sends back just the bot's reply text in `data.response`\r\n      setChatLog(prevChatLog => [...prevChatLog, { sender: 'Bot', text: data.response }]);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      setIsLoading(false); // Clear loading state on error\r\n      // Add an error message to the chat log\r\n      setChatLog(prevChatLog => [...prevChatLog, { sender: 'Bot', text: `*Error: Could not get a response. Please check the server connection. (${error.message})*` }]); // Use markdown for italics\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <h2>Chat with AI Mentor</h2>\r\n      {/* Add an optional subtitle or intro text */}\r\n      <p className=\"page-subtitle\">Ask me anything about career paths, skills, or job opportunities.</p> {/* Reused class */}\r\n\r\n      {/* Assign the ref to the chat window */}\r\n      <div className=\"chat-window\" ref={chatWindowRef}>\r\n        {/* Initial greeting - UI only, not sent to API */}\r\n        {chatLog.length === 0 && !isLoading && (\r\n            // Style this initial message slightly differently or center it\r\n            <div className=\"chat-entry bot initial-message\" style={{ alignSelf: 'center', textAlign: 'center', maxWidth: '85%', margin: '1rem auto' }}>\r\n               <strong>Bot:</strong> Hello! I'm your AI Mentor, ready to help you with training and job seeking. Ask me anything!\r\n            </div>\r\n        )}\r\n        {/* Render chat messages */}\r\n        {chatLog.map((entry, idx) => (\r\n          // Added key prop for list rendering performance\r\n          // Added data-is-markdown attribute for CSS targeting if needed\r\n          <div key={idx} className={`chat-entry ${entry.sender.toLowerCase()}`} data-is-markdown={entry.sender === 'Bot' ? \"true\" : undefined}>\r\n            <strong>{entry.sender}:</strong> <ReactMarkdown>{entry.text}</ReactMarkdown>\r\n          </div>\r\n        ))}\r\n         {/* Loading indicator message */}\r\n        {isLoading && (\r\n            // Keep the loading indicator aligned left and use a minimal style\r\n            <div className=\"chat-entry bot loading-indicator\" style={{ alignSelf: 'flex-start', maxWidth: 'max-content' /*, animation: 'pulse 1.5s infinite ease-in-out'*/ }}>\r\n               <strong>Bot:</strong> ... {/* Or a typing indicator animation */}\r\n            </div>\r\n        )}\r\n      </div>\r\n      <form onSubmit={sendMessage} className=\"chat-form\">\r\n        {/* Assigned the class name \"chat-input\" */}\r\n        <input\r\n          className=\"chat-input\"\r\n          type=\"text\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder={isLoading ? \"Waiting for response...\" : \"Type your message here\"}\r\n          disabled={isLoading} // Disable input while loading\r\n        />\r\n        <button type=\"submit\" disabled={!message.trim() || isLoading}>Send</button> {/* Disable button if input is empty or loading */}\r\n      </form>\r\n       {/* Optional loading spinner/message outside the chat form if preferred */}\r\n       {/* {isLoading && <div className=\"loading-message\">Sending...</div>} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBot;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,aAAa,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnD,MAAMc,aAAa,GAAGb,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEpC;EACAC,SAAS,CAAC,MAAM;IACd,IAAIY,aAAa,CAACC,OAAO,EAAE;MACzBD,aAAa,CAACC,OAAO,CAACC,SAAS,GAAGF,aAAa,CAACC,OAAO,CAACE,YAAY;IACtE;EACF,CAAC,EAAE,CAACP,OAAO,EAAEE,SAAS,CAAC,CAAC,CAAC,CAAC;;EAE1B,MAAMM,WAAW,GAAG,MAAOC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,MAAMC,WAAW,GAAGb,OAAO,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,IAAI,CAACD,WAAW,IAAIT,SAAS,EAAE,OAAO,CAAC;;IAEvC;IACAD,UAAU,CAACY,WAAW,IAAI,CAAC,GAAGA,WAAW,EAAE;MAAEC,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEJ;IAAY,CAAC,CAAC,CAAC;IAClFZ,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAChBI,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEpB,MAAMa,WAAW,GAAG;MAClBlB,OAAO,EAAEa;MACT;MACA;IACF,CAAC;IAED,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;QACzDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;MAClC,CAAC,CAAC;MAEFb,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;;MAErB,IAAI,CAACc,QAAQ,CAACO,EAAE,EAAE;QACf;QACA,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACF,IAAI,CAAC,CAAC,CAACW,KAAK,CAAC,MAAMT,QAAQ,CAACU,UAAU,CAAC;QACxE,MAAM,IAAIC,KAAK,CAAC,uBAAuBX,QAAQ,CAACY,MAAM,MAAMJ,SAAS,EAAE,CAAC;MAC3E;MAEA,MAAMK,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MAClC;MACA9B,UAAU,CAACY,WAAW,IAAI,CAAC,GAAGA,WAAW,EAAE;QAAEC,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAEe,IAAI,CAACb;MAAS,CAAC,CAAC,CAAC;IAErF,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C7B,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;MACAF,UAAU,CAACY,WAAW,IAAI,CAAC,GAAGA,WAAW,EAAE;QAAEC,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAE,0EAA0EiB,KAAK,CAAClC,OAAO;MAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACrK;EACF,CAAC;EAGD,oBACEH,OAAA;IAAKuC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCxC,OAAA;MAAAwC,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE5B5C,OAAA;MAAGuC,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAAiE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,KAAC,eAGnG5C,OAAA;MAAKuC,SAAS,EAAC,aAAa;MAACM,GAAG,EAAEpC,aAAc;MAAA+B,QAAA,GAE7CnC,OAAO,CAACyC,MAAM,KAAK,CAAC,IAAI,CAACvC,SAAS;MAAA;MAC/B;MACAP,OAAA;QAAKuC,SAAS,EAAC,gCAAgC;QAACQ,KAAK,EAAE;UAAEC,SAAS,EAAE,QAAQ;UAAEC,SAAS,EAAE,QAAQ;UAAEC,QAAQ,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAY,CAAE;QAAAX,QAAA,gBACvIxC,OAAA;UAAAwC,QAAA,EAAQ;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,iGACxB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACR,EAEAvC,OAAO,CAAC+C,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG;MAAA;MACtB;MACA;MACAtD,OAAA;QAAeuC,SAAS,EAAE,cAAcc,KAAK,CAAClC,MAAM,CAACoC,WAAW,CAAC,CAAC,EAAG;QAAC,oBAAkBF,KAAK,CAAClC,MAAM,KAAK,KAAK,GAAG,MAAM,GAAGqC,SAAU;QAAAhB,QAAA,gBAClIxC,OAAA;UAAAwC,QAAA,GAASa,KAAK,CAAClC,MAAM,EAAC,GAAC;QAAA;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,eAAA5C,OAAA,CAACF,aAAa;UAAA0C,QAAA,EAAEa,KAAK,CAACjC;QAAI;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CAAC;MAAA,GADpEU,GAAG;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAER,CACN,CAAC,EAEDrC,SAAS;MAAA;MACN;MACAP,OAAA;QAAKuC,SAAS,EAAC,kCAAkC;QAACQ,KAAK,EAAE;UAAEC,SAAS,EAAE,YAAY;UAAEE,QAAQ,EAAE,aAAa,CAAC;QAAmD,CAAE;QAAAV,QAAA,gBAC9JxC,OAAA;UAAAwC,QAAA,EAAQ;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,SAAK;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACN5C,OAAA;MAAMyD,QAAQ,EAAE5C,WAAY;MAAC0B,SAAS,EAAC,WAAW;MAAAC,QAAA,gBAEhDxC,OAAA;QACEuC,SAAS,EAAC,YAAY;QACtBmB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAExD,OAAQ;QACfyD,QAAQ,EAAG9C,CAAC,IAAKV,UAAU,CAACU,CAAC,CAAC+C,MAAM,CAACF,KAAK,CAAE;QAC5CG,WAAW,EAAEvD,SAAS,GAAG,yBAAyB,GAAG,wBAAyB;QAC9EwD,QAAQ,EAAExD,SAAU,CAAC;MAAA;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC,eACF5C,OAAA;QAAQ0D,IAAI,EAAC,QAAQ;QAACK,QAAQ,EAAE,CAAC5D,OAAO,CAACc,IAAI,CAAC,CAAC,IAAIV,SAAU;QAAAiC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGJ,CAAC;AAEV;AAAC1C,EAAA,CAxGQD,OAAO;AAAA+D,EAAA,GAAP/D,OAAO;AA0GhB,eAAeA,OAAO;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}