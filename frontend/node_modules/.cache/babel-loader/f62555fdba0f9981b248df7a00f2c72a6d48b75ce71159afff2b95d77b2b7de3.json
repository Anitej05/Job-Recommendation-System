{"ast":null,"code":"var _jsxFileName = \"E:\\\\Job-Recommendation-System\\\\frontend\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [message, setMessage] = useState('');\n  const [chatLog, setChatLog] = useState([]);\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (!message.trim()) return; // Prevent sending empty messages\n\n    // Add user message to log immediately\n    setChatLog(prevChatLog => [...prevChatLog, {\n      sender: 'User',\n      text: message\n    }]);\n    setMessage(''); // Clear input field right away\n\n    try {\n      // Simulate a loading message or disable input if needed here\n      const response = await fetch('http://localhost:8000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      // Add bot response to log\n      setChatLog(prevChatLog => [...prevChatLog, {\n        sender: 'Bot',\n        text: data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      // Add an error message to the chat log\n      setChatLog(prevChatLog => [...prevChatLog, {\n        sender: 'Bot',\n        text: `Error: Could not get a response. (${error.message})`\n      }]);\n    }\n  };\n\n  // Simple scroll to bottom effect (optional but good for chat UIs)\n  // You'd typically add a ref to the chat-window and scroll it\n  // import { useRef, useEffect } from 'react';\n  // const chatWindowRef = useRef(null);\n  // useEffect(() => {\n  //   if (chatWindowRef.current) {\n  //     chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\n  //   }\n  // }, [chatLog]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat with AI Mentor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [chatLog.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-entry bot\",\n        style: {\n          alignSelf: 'center',\n          textAlign: 'center',\n          maxWidth: 'max-content'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Bot:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 16\n        }, this), \" Hello! How can I assist you today?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), chatLog.map((entry, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-entry ${entry.sender.toLowerCase()}`,\n        \"data-is-markdown\": entry.sender === 'Bot' ? \"true\" : undefined,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [entry.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: entry.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 46\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"chat-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"chat-input\",\n        type: \"text\" // Good practice to explicitly set type\n        ,\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type your message here\"\n        // Optional: Disable input while waiting for response\n        // disabled={isLoading}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\" /* disabled={!message.trim() || isLoading} */,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"binKtiGECzMbBJQvJAwnAZBJbAU=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","ReactMarkdown","jsxDEV","_jsxDEV","ChatBot","_s","message","setMessage","chatLog","setChatLog","sendMessage","e","preventDefault","trim","prevChatLog","sender","text","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","style","alignSelf","textAlign","maxWidth","map","entry","idx","toLowerCase","undefined","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["E:/Job-Recommendation-System/frontend/src/components/ChatBot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nfunction ChatBot() {\r\n  const [message, setMessage] = useState('');\r\n  const [chatLog, setChatLog] = useState([]);\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!message.trim()) return; // Prevent sending empty messages\r\n\r\n    // Add user message to log immediately\r\n    setChatLog(prevChatLog => [...prevChatLog, { sender: 'User', text: message }]);\r\n    setMessage(''); // Clear input field right away\r\n\r\n    try {\r\n      // Simulate a loading message or disable input if needed here\r\n      const response = await fetch('http://localhost:8000/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n         throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      // Add bot response to log\r\n      setChatLog(prevChatLog => [...prevChatLog, { sender: 'Bot', text: data.response }]);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      // Add an error message to the chat log\r\n      setChatLog(prevChatLog => [...prevChatLog, { sender: 'Bot', text: `Error: Could not get a response. (${error.message})` }]);\r\n    }\r\n  };\r\n\r\n  // Simple scroll to bottom effect (optional but good for chat UIs)\r\n  // You'd typically add a ref to the chat-window and scroll it\r\n  // import { useRef, useEffect } from 'react';\r\n  // const chatWindowRef = useRef(null);\r\n  // useEffect(() => {\r\n  //   if (chatWindowRef.current) {\r\n  //     chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\r\n  //   }\r\n  // }, [chatLog]);\r\n\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <h2>Chat with AI Mentor</h2>\r\n      <div className=\"chat-window\">\r\n        {/* Add an initial message if chatLog is empty */}\r\n        {chatLog.length === 0 && (\r\n            <div className=\"chat-entry bot\" style={{ alignSelf: 'center', textAlign: 'center', maxWidth: 'max-content' }}>\r\n               <strong>Bot:</strong> Hello! How can I assist you today?\r\n            </div>\r\n        )}\r\n        {/* Render chat messages */}\r\n        {chatLog.map((entry, idx) => (\r\n          <div key={idx} className={`chat-entry ${entry.sender.toLowerCase()}`} data-is-markdown={entry.sender === 'Bot' ? \"true\" : undefined}>\r\n            <strong>{entry.sender}:</strong> <ReactMarkdown>{entry.text}</ReactMarkdown>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={sendMessage} className=\"chat-form\">\r\n        {/* Assigned the class name \"chat-input\" */}\r\n        <input\r\n          className=\"chat-input\"\r\n          type=\"text\" // Good practice to explicitly set type\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Type your message here\"\r\n          // Optional: Disable input while waiting for response\r\n          // disabled={isLoading}\r\n        />\r\n        {/* Optional: Disable button while waiting for response */}\r\n        <button type=\"submit\" /* disabled={!message.trim() || isLoading} */>Send</button>\r\n      </form>\r\n      {/* Optional: Add a loading indicator */}\r\n      {/* {isLoading && <div className=\"loading-message\">Typing...</div>} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}